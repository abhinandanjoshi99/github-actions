name: Tf Sample

on:
  issue_comment:
    types: [created]


jobs:

  terraform-init:
    if: contains(github.event.comment.body, 'terraform init')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform init
        id: init        
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          ${{ github.event.comment.body }} -no-color

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: Comment PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.AJOSHI_TOKEN }}
          script: |
            const output =  `#### TF Init Output \`${{ steps.init.outputs.stdout }}\``;
            const substr = '─────────────────────────────────────────────────────────────────────────────'
            const output2 = ${output#*$substr}
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output2
            })

  terraform-plan:
    if: contains(github.event.comment.body, 'terraform plan')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform init
        id: init        
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          terraform init -no-color

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: TF Plan
        id: plan
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          ${{ github.event.comment.body }} -no-color

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: Comment PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.AJOSHI_TOKEN }}
          script: |
            const output =  `#### TF Plan Output\`${{ steps.plan.outputs.stdout }}\``;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })


  terraform-apply:
    if: contains(github.event.comment.body, 'terrafrom apply')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform init
        id: init        
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          terraform init -no-color

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: TF Apply
        id: apply
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          ${{ github.event.comment.body }} -no-color

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: Comment PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.AJOSHI_TOKEN }}
          script: |
            const output =  `## TF Apply Output\`${{ steps.apply.outputs.stdout }}\``;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-destroy:
    if: contains(github.event.comment.body, 'terraform destroy')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform init
        id: init        
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          ${{ github.event.comment.body }} -no-color

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: TF Destroy
        id: destroy
        run: |
          export ARM_CLIENT_ID=$ARM_CLIENT_ID
          export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
          export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
          export ARM_TENANT_ID=$ARM_TENANT_ID 
          terraform destroy -no-color --auto-approve 

        env:
          ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}

      - name: Comment PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.AJOSHI_TOKEN }}
          script: |
            const output =  `## TF Apply Output\`${{ steps.destroy.outputs.stdout }}\``;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
